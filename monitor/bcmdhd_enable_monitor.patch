diff --git a/drivers/net/wireless/bcmdhd/wl_cfg80211.c b/drivers/net/wireless/bcmdhd/wl_cfg80211.c
index 24f30d7c..5c115cbc 100644
--- a/drivers/net/wireless/bcmdhd/wl_cfg80211.c
+++ b/drivers/net/wireless/bcmdhd/wl_cfg80211.c
@@ -55,12 +55,12 @@
 #include <dhd_wlfc.h>
 #endif
 
-#ifdef WL11U
-#if !defined(WL_ENABLE_P2P_IF) && !defined(WL_CFG80211_P2P_DEV_IF)
-#error You should enable 'WL_ENABLE_P2P_IF' or 'WL_CFG80211_P2P_DEV_IF' \
-	according to Kernel version and is supported only in Android-JB
-#endif /* !WL_ENABLE_P2P_IF && !WL_CFG80211_P2P_DEV_IF */
-#endif /* WL11U */
+//#ifdef WL11U
+//#if !defined(WL_ENABLE_P2P_IF) && !defined(WL_CFG80211_P2P_DEV_IF)
+//#error You should enable 'WL_ENABLE_P2P_IF' or 'WL_CFG80211_P2P_DEV_IF' \
+//	according to Kernel version and is supported only in Android-JB
+//#endif /* !WL_ENABLE_P2P_IF && !WL_CFG80211_P2P_DEV_IF */
+//#endif /* WL11U */
 
 #ifdef BCMWAPI_WPI
 /* these items should evetually go into wireless.h of the linux system headfile dir */
@@ -1335,16 +1335,16 @@ static chanspec_t wl_cfg80211_get_shared_freq(struct wiphy *wiphy)
 static bcm_struct_cfgdev *
 wl_cfg80211_add_monitor_if(char *name)
 {
-#if defined(WL_ENABLE_P2P_IF) || defined(WL_CFG80211_P2P_DEV_IF)
-	WL_INFORM(("wl_cfg80211_add_monitor_if: No more support monitor interface\n"));
-	return ERR_PTR(-EOPNOTSUPP);
-#else
+//#if defined(WL_ENABLE_P2P_IF) || defined(WL_CFG80211_P2P_DEV_IF)
+//	WL_INFORM(("wl_cfg80211_add_monitor_if: No more support monitor interface\n"));
+//	return ERR_PTR(-EOPNOTSUPP);
+//#else
 	struct net_device* ndev = NULL;
 
 	dhd_add_monitor(name, &ndev);
 	WL_INFORM(("wl_cfg80211_add_monitor_if net device returned: 0x%p\n", ndev));
 	return ndev_to_cfgdev(ndev);
-#endif /* WL_ENABLE_P2P_IF || WL_CFG80211_P2P_DEV_IF */
+//#endif /* WL_ENABLE_P2P_IF || WL_CFG80211_P2P_DEV_IF */
 }
 
 static bcm_struct_cfgdev *
@@ -1727,6 +1727,8 @@ wl_cfg80211_change_virtual_iface(struct wiphy *wiphy, struct net_device *ndev,
 	s32 ap = 0;
 	s32 infra = 0;
 	s32 ibss = 0;
+	s32 mon = 0;
+	s32 promisc = 0;
 	s32 wlif_type;
 	s32 mode = 0;
 	s32 err = BCME_OK;
@@ -1737,6 +1739,10 @@ wl_cfg80211_change_virtual_iface(struct wiphy *wiphy, struct net_device *ndev,
 	WL_DBG(("Enter type %d\n", type));
 	switch (type) {
 	case NL80211_IFTYPE_MONITOR:
+		mon = 2;
+		promisc = 1;
+		mode = WL_MODE_MONITOR;
+			break;
 	case NL80211_IFTYPE_WDS:
 	case NL80211_IFTYPE_MESH_POINT:
 		ap = 1;
@@ -1809,14 +1815,17 @@ wl_cfg80211_change_virtual_iface(struct wiphy *wiphy, struct net_device *ndev,
 		WL_DBG(("Change_virtual_iface for transition from GO/AP to client/STA"));
 	}
 
-	if (ibss) {
-		infra = 0;
-		wl_set_mode_by_netdev(cfg, ndev, mode);
-		err = wldev_ioctl(ndev, WLC_SET_INFRA, &infra, sizeof(s32), true);
-		if (err < 0) {
-			WL_ERR(("SET Adhoc error %d\n", err));
-			return -EINVAL;
-		}
+	if (mon) {
+		ndev->type = ARPHRD_IEEE80211_RADIOTAP;
+	} else {
+		ndev->type = ARPHRD_ETHER;
+	}
+
+	if (!ap) {
+	wldev_ioctl(ndev, WLC_SET_INFRA, &infra, sizeof(s32), true);
+	wldev_ioctl(ndev, WLC_SET_PROMISC, &promisc, sizeof(s32), true);
+	wldev_ioctl(ndev, WLC_SET_MONITOR, &mon, sizeof(s32), true);
+	wl_set_mode_by_netdev(cfg, ndev, mode);
 	}
 
 	ndev->ieee80211_ptr->iftype = type;
@@ -6371,6 +6380,17 @@ change_bw:
 	return err;
 }
 
+static s32
+wl_cfg80211_set_monitor_channel(struct wiphy *wiphy, struct cfg80211_chan_def *chandef)
+{
+
+	struct bcm_cfg80211 *cfg = wiphy_priv(wiphy);
+	struct net_device *dev = bcmcfg_to_prmry_ndev(cfg);
+	enum nl80211_channel_type channel_type = cfg80211_get_chandef_type(chandef);
+
+	return(wl_cfg80211_set_channel(wiphy, dev, chandef->chan, channel_type));
+}
+
 #ifdef WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST
 struct net_device *
 wl_cfg80211_get_remain_on_channel_ndev(struct bcm_cfg80211 *cfg)
@@ -8263,6 +8283,7 @@ static struct cfg80211_ops wl_cfg80211_ops = {
 	.mgmt_tx = wl_cfg80211_mgmt_tx,
 	.mgmt_frame_register = wl_cfg80211_mgmt_frame_register,
 	.change_bss = wl_cfg80211_change_bss,
+	.set_monitor_channel = wl_cfg80211_set_monitor_channel,
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3, 6, 0)) || defined(WL_COMPAT_WIRELESS)
 	.set_channel = wl_cfg80211_set_channel,
 #endif /* ((LINUX_VERSION < VERSION(3, 6, 0)) || WL_COMPAT_WIRELESS */
@@ -8306,6 +8327,8 @@ s32 wl_mode_to_nl80211_iftype(s32 mode)
 		return NL80211_IFTYPE_ADHOC;
 	case WL_MODE_AP:
 		return NL80211_IFTYPE_AP;
+	case WL_MODE_MONITOR:
+		return NL80211_IFTYPE_MONITOR;
 	default:
 		return NL80211_IFTYPE_UNSPECIFIED;
 	}
@@ -8396,9 +8419,9 @@ static s32 wl_setup_wiphy(struct wireless_dev *wdev, struct device *sdiofunc_dev
 	wdev->wiphy->interface_modes =
 		BIT(NL80211_IFTYPE_STATION)
 		| BIT(NL80211_IFTYPE_ADHOC)
-#if !defined(WL_ENABLE_P2P_IF) && !defined(WL_CFG80211_P2P_DEV_IF)
+//#if !defined(WL_ENABLE_P2P_IF) && !defined(WL_CFG80211_P2P_DEV_IF)
 		| BIT(NL80211_IFTYPE_MONITOR)
-#endif /* !WL_ENABLE_P2P_IF && !WL_CFG80211_P2P_DEV_IF */
+//#endif /* !WL_ENABLE_P2P_IF && !WL_CFG80211_P2P_DEV_IF */
 #if defined(WL_IFACE_COMB_NUM_CHANNELS) || defined(WL_CFG80211_P2P_DEV_IF)
 		| BIT(NL80211_IFTYPE_P2P_CLIENT)
 		| BIT(NL80211_IFTYPE_P2P_GO)
@@ -11543,8 +11566,14 @@ static s32 wl_config_ifmode(struct bcm_cfg80211 *cfg, struct net_device *ndev, s
 	s32 infra = 0;
 	s32 err = 0;
 	s32 mode = 0;
+	s32 mon = 0;
+	s32 promisc = 0;
 	switch (iftype) {
 	case NL80211_IFTYPE_MONITOR:
+		mode = WL_MODE_MONITOR;
+		mon = 2;
+		promisc = 1;
+		break;
 	case NL80211_IFTYPE_WDS:
 		WL_ERR(("type (%d) : currently we do not support this mode\n",
 			iftype));
@@ -11569,11 +11598,31 @@ static s32 wl_config_ifmode(struct bcm_cfg80211 *cfg, struct net_device *ndev, s
 		return err;
 	}
 	infra = htod32(infra);
+	mon = htod32(mon);
+	promisc = htod32(promisc);
+
 	err = wldev_ioctl(ndev, WLC_SET_INFRA, &infra, sizeof(infra), true);
 	if (unlikely(err)) {
 		WL_ERR(("WLC_SET_INFRA error (%d)\n", err));
 		return err;
 	}
+	err = wldev_ioctl(ndev, WLC_SET_PROMISC, &promisc, sizeof(s32), true);
+	if (unlikely(err)) {
+		WL_ERR(("WLC_SET_PROMISC error (%d)\n", err));
+		return err;
+	}
+	err = wldev_ioctl(ndev, WLC_SET_MONITOR, &mon, sizeof(mon), true);
+	if (unlikely(err)) {
+		WL_ERR(("WLC_SET_MONITOR error (%d)\n", err));
+		return err;
+	}
+
+	if (mon) {
+		ndev->type = ARPHRD_IEEE80211_RADIOTAP;
+	} else {
+		ndev->type = ARPHRD_ETHER;
+	}
+
 
 	wl_set_mode_by_netdev(cfg, ndev, mode);
 
diff --git a/drivers/net/wireless/bcmdhd/wl_cfg80211.h b/drivers/net/wireless/bcmdhd/wl_cfg80211.h
index 108e61e1..0aab2764 100644
--- a/drivers/net/wireless/bcmdhd/wl_cfg80211.h
+++ b/drivers/net/wireless/bcmdhd/wl_cfg80211.h
@@ -211,7 +211,8 @@ enum wl_status {
 enum wl_mode {
 	WL_MODE_BSS,
 	WL_MODE_IBSS,
-	WL_MODE_AP
+	WL_MODE_AP,
+	WL_MODE_MONITOR
 };
 
 /* driver profile list */
